generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  name             String?
  email            String          @unique
  emailVerified    Boolean         @default(false)
  image            String?
  role             String          @default("PARENT")
  stripeCustomerId String?
  isGuestAccount   Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  accounts         Account[]
  donations        Donation[]
  guestPayments    GuestPayment[]
  sessions         Session[]
  stripeCache      StripeCache?
  students         StudentParent[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
}

model Student {
  id            String                     @id @default(cuid())
  name          String
  instrument    String
  grade         String?
  source        String                     @default("ROSTER")
  createdAt     DateTime                   @default(now())
  updatedAt     DateTime                   @updatedAt
  guestPayments GuestPayment[]
  parents       StudentParent[]
  enrollments   StudentPaymentEnrollment[]
}

model StudentParent {
  id        String    @id @default(cuid())
  userId    String
  studentId String
  status    String    @default("PENDING")
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  student   Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, studentId])
}

model StripeCache {
  id        String   @id @default(cuid())
  userId    String   @unique
  data      Json
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PaymentCategory {
  id              String                     @id @default(cuid())
  name            String                     @unique
  description     String?
  fullAmount      Int
  allowIncrements Boolean                    @default(false)
  incrementAmount Int?
  active          Boolean                    @default(true)
  createdAt       DateTime                   @default(now())
  updatedAt       DateTime                   @updatedAt
  guestPayments   GuestPayment[]
  payments        Payment[]
  enrollments     StudentPaymentEnrollment[]
}

model StudentPaymentEnrollment {
  id         String          @id @default(cuid())
  studentId  String
  categoryId String
  totalOwed  Int
  amountPaid Int             @default(0)
  status     String          @default("ACTIVE")
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  payments   Payment[]
  category   PaymentCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  student    Student         @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, categoryId])
}

model Payment {
  id                    String                   @id @default(cuid())
  enrollmentId          String
  stripePaymentIntentId String                   @unique
  amount                Int
  status                String                   @default("PENDING")
  notes                 String?
  parentEmail           String
  studentName           String
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  categoryId            String
  category              PaymentCategory          @relation(fields: [categoryId], references: [id])
  enrollment            StudentPaymentEnrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
}

model GuestPayment {
  id                    String          @id @default(cuid())
  parentName            String
  parentEmail           String
  studentName           String
  categoryId            String
  amount                Int
  notes                 String?
  stripePaymentIntentId String          @unique
  status                String          @default("PENDING")
  matchedStudentId      String?
  matchedUserId         String?
  resolutionNotes       String?
  resolvedAt            DateTime?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  matchedUser           User?           @relation(fields: [matchedUserId], references: [id])
  matchedStudent        Student?        @relation(fields: [matchedStudentId], references: [id])
  category              PaymentCategory @relation(fields: [categoryId], references: [id])
}

model Donation {
  id                    String   @id @default(cuid())
  parentName            String
  parentEmail           String
  amount                Int
  notes                 String
  stripePaymentIntentId String   @unique
  status                String   @default("PENDING")
  isGuest               Boolean  @default(false)
  userId                String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User?    @relation(fields: [userId], references: [id])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
